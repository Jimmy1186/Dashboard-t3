// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @db.Char(6)
  username String    @unique @db.VarChar(20)
  password String
  role     Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId   Int
  charges  Charge[]
  history  History[]
}

model Role {
  id   Int    @id @default(autoincrement())
  role String @db.Char(1)
  user User[]
}

model Company {
  id         Int                @id @default(autoincrement())
  name       String?            @unique @db.VarChar(20)
  title      String             @unique @db.VarChar(40)
  tax        String?            @unique @db.Char(8)
  priCompary PrimaryCompany[]
  secCompary SecondaryCompany[]

  @@unique([name, title, tax])
}

model Installment {
  id      Int     @id @default(autoincrement())
  percent Int
  ok      Boolean
  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId  String
}

model Location {
  id       Int    @id @default(autoincrement())
  location String @unique @db.VarChar(10)
  task     Task[]
}

model PrimaryCompany {
  id Int @id @default(autoincrement())

  amount     Decimal  @db.Decimal(19, 4)
  cutPayment Decimal? @db.Decimal(19, 4)

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  notes PriNote[]

  @@unique([taskId, companyId])
}

model SecondaryCompany {
  id Int @id @default(autoincrement())

  amount     Decimal  @db.Decimal(19, 4)
  cutPayment Decimal? @db.Decimal(19, 4)

  task   Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  notes SecNote[]
}

model PriNote {
  id        Int            @id @default(autoincrement())
  note      String
  company   PrimaryCompany? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
}

model SecNote {
  id        Int              @id @default(autoincrement())
  note      String
  company   SecondaryCompany? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
}

model History {
  id     Int      @id @default(autoincrement())
  editAt DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

model Charge {
  id     Int    @id @default(autoincrement())
  users  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

model Task {
  id        String    @id @db.VarChar(6)
  name      String    @db.VarChar(50)
  p         Int?
  pValue    Decimal?  @db.Decimal(19, 4)
  startDate DateTime?
  endDate   DateTime?
  open      DateTime?
  createAt  DateTime

  priCompany   PrimaryCompany[]
  secCompany   SecondaryCompany[]
  installments Installment[]
  charges      Charge[]
  history      History[]

  locations  Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId Int
}
