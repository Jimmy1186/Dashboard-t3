// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @db.Char(6)
  username String    @unique @db.VarChar(20)
  password String
  role     Role      @relation(fields: [roleId], references: [id])
  roleId   Int
  task     Task[]
  history  History[]
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String @db.Char(1)
  user  User[]
}

model Company {
  id         Int                @id @default(autoincrement())
  name       String?            @unique @db.VarChar(20)
  title      String             @unique @db.VarChar(40)
  tax        String?            @unique @db.Char(8)
  priCompary PrimaryCompany[]
  secCompary SecondaryCompany[]
}

model Installment {
  id           Int     @id @default(autoincrement())
  percent      Int
  ok           Boolean
  task         Task[]
}

model Location {
  id        Int      @id @default(autoincrement())
  location  String   @unique @db.VarChar(5)
  regions   Region[]
  task      Task[]
}

model Region {
  id         Int       @id @default(autoincrement())
  region     String    @unique @db.VarChar(10)
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int
}

model Numero {
  id      Int    @id @default(autoincrement())
  numero  String @unique @db.VarChar(10)
  numeros Task[]
}

model PrimaryCompany {
  id     Int  @id @default(autoincrement())

  amount Decimal   @db.Decimal(19, 4)
  cutPayment Decimal?   @db.Decimal(19, 4)

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  note Note? @relation(fields: [notes],references: [id])
  notes Int
}

model SecondaryCompany {
  id     Int   @id @default(autoincrement())

  amount Decimal   @db.Decimal(19, 4)
  cutPayment Decimal?   @db.Decimal(19, 4)


  task   Task? @relation(fields: [taskId], references: [id])
  taskId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
  
  note Note? @relation(fields: [notes],references: [id])
  notes Int
}


model Note{
 id     Int   @id @default(autoincrement())
 note   String
 primaryCompays PrimaryCompany[]
 secondaryCompanys SecondaryCompany[]
}

model History {
  id     Int      @id @default(autoincrement())
  editAt DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])
  userId String

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int
}

model Task {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(50)
  p          Int?
  pValue     Decimal?  @db.Decimal(19, 4)
  during     String?   @db.Char(16)
  open       DateTime?
  createAt   DateTime

  priCompany PrimaryCompany[]
  secCompany SecondaryCompany[]

  locations  Location? @relation(fields: [locationId], references: [id])
  locationId Int

  users  User   @relation(fields: [userId], references: [id])
  userId String

  installments  Installment? @relation(fields: [installmentId], references: [id])
  installmentId Int

  numero   Numero    @relation(fields: [numeroId], references: [id])
  numeroId Int
  history  History[]
}
